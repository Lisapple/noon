[gd_scene load_steps=3 format=2]

[sub_resource type="GDScript" id=1]

script/source = "tool
extends Particles

### Imports

var SoundPlayer = preload(\"res://SoundPlayer.gd\")

### Variables

var audio_player = SoundPlayer.new()

### Signals

signal particles_bounced(node, orb, position)
signal particles_finished(node, orb, behaviour, callback)

func _ready():
	add_child(audio_player)

var orb setget set_orb, get_orb
func get_orb():
	return orb
func set_orb(orb, season = 0):
	assert(orb != Orb.BLUE_OR_GREEN)
	var color = Orb.color(orb, season)
	var c0 = color; c0.s *= 2.2; c0.v *= 1.8; c0.a = 0.75
	var c1 = c0; c1.v *= 1.8; c1.a = 0.75
	var c2 = c1; c2.a = 0.15
	var c3 = c1; c3.a = 0.05
	assert(get_color_phases() == 4)
	set_color_phase_color(0, color)
	set_color_phase_color(1, c1)
	set_color_phase_color(2, c2)
	set_color_phase_color(3, c3)
	set_light_enabled(true, color)

func set_light_enabled(enabled, color=null):
	var name = \"orb[%s]-spotlight\" % get_instance_ID()
	if not has_node(name):
		var projector = preload(\"res://textures/spotlight-texture.png\")
		var light = SpotLight.new(); light.set_name(name)
		light.set_parameter(Light.PARAM_RADIUS, 5.5)
		light.set_parameter(Light.PARAM_ENERGY, 0.45)
		light.set_parameter(Light.PARAM_SPOT_ANGLE, 18)
		light.set_parameter(Light.PARAM_SPOT_ATTENUATION, 100)
		light.set_rotation_deg(Vector3(-90, 0, 0))
		light.set_translation(Vector3(0, 1.5, 0))
		light.set_projector(projector)
		add_child(light)
		# Wider spotlight for external gradient effect
		var light2 = SpotLight.new(); light2.set_name(name)
		light2.set_color(Light.COLOR_DIFFUSE, color)
		light2.set_parameter(Light.PARAM_RADIUS, 6.5)
		light2.set_parameter(Light.PARAM_ENERGY, 0.25)
		light2.set_parameter(Light.PARAM_SPOT_ANGLE, 24)
		light2.set_parameter(Light.PARAM_SPOT_ATTENUATION, 100)
		light2.set_projector(projector)
		light.add_child(light2)

	var light = get_node(name); light.set_enabled(true)
	if color != null: light.set_color(Light.COLOR_DIFFUSE, color)
	var light2 = light.get_node(name); light2.set_enabled(true)
	if color != null: light2.set_color(Light.COLOR_DIFFUSE, color)

func bounced(orb, position): # void bounced(Orb, Vector3)
	emit_signal(\"particles_bounced\", self, orb, position)
	play_bounce_sound()

func finished_moves(orb, behaviour, callback): # void finished_moves(Orb, Behaviour, String)
	emit_signal(\"particles_finished\", self, orb, behaviour, callback)
	set_playing_move_sound(false)
	set_light_enabled(false)

func set_playing_move_sound(playing):
	if playing: audio_player.play(Sound.PARTICLES)
	else: audio_player.stop(Sound.PARTICLES)

func play_bounce_sound():
	audio_player.play(Sound.BOUNCE)"

[sub_resource type="Animation" id=2]

resource_name = "New Anim"
length = 2.0
loop = true
step = 0.1
tracks/0/type = "value"
tracks/0/path = NodePath(".:translation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/keys = {
"times": PoolRealArray( 0, 2 ),
"transitions": PoolRealArray( 1, 1 ),
"update": 0,
"values": [ Vector3( 0, 1, 0 ), Vector3( 0, 1, 4.48082 ) ]
}

[node name="Particles" type="Particles"]

transform = Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 1, 0 )
layers = 1
material_override = null
cast_shadow = 0
extra_cull_margin = 0.0
use_in_baked_light = false
lod_min_distance = 0.0
lod_min_hysteresis = 0.0
lod_max_distance = 0.0
lod_max_hysteresis = 0.0
emitting = false
amount = 40
lifetime = 1.0
one_shot = false
preprocess = 0.0
speed_scale = 1.0
explosiveness = 0.0
randomness = 0.0
fixed_fps = 0
fract_delta = true
visibility_aabb = AABB( -4, -4, -4, 8, 8, 8 )
local_coords = false
draw_order = 0
process_material = null
draw_passes = 1
draw_pass_1 = null
script = SubResource( 1 )

[node name="AnimationPlayer" type="AnimationPlayer" parent="." index="0"]

root_node = NodePath("..")
autoplay = ""
playback_process_mode = 1
playback_default_blend_time = 0.0
playback_speed = 1.0
anims/NewAnim = SubResource( 2 )
blend_times = [  ]


